generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model organization {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model payroll {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  employee_id String   @db.Uuid
  salary      Int
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user        user     @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model performance_evaluation {
  id                                             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  employee_id                                    String   @db.Uuid
  team_lead_id                                   String   @db.Uuid
  evaluation_date                                DateTime @db.Date
  evaluation                                     String   @db.VarChar(255)
  created_at                                     DateTime @default(now()) @db.Timestamp(6)
  updated_at                                     DateTime @default(now()) @db.Timestamp(6)
  user_performance_evaluation_employee_idTouser  user     @relation("performance_evaluation_employee_idTouser", fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_performance_evaluation_team_lead_idTouser user     @relation("performance_evaluation_team_lead_idTouser", fields: [team_lead_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model time_tracking {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  employee_id  String   @db.Uuid
  hours_worked Int
  created_at   DateTime @default(now()) @db.Timestamp(6)
  updated_at   DateTime @default(now()) @db.Timestamp(6)
  user         user     @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                                                               String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                                                            String                   @unique @db.VarChar(255)
  firstName                                                        String?                  @db.VarChar(255)
  lastName                                                         String?                  @db.VarChar(255)
  roq_user_id                                                      String                   @db.VarChar(255)
  tenant_id                                                        String                   @db.VarChar(255)
  created_at                                                       DateTime                 @default(now()) @db.Timestamp(6)
  updated_at                                                       DateTime                 @default(now()) @db.Timestamp(6)
  organization                                                     organization[]
  payroll                                                          payroll[]
  performance_evaluation_performance_evaluation_employee_idTouser  performance_evaluation[] @relation("performance_evaluation_employee_idTouser")
  performance_evaluation_performance_evaluation_team_lead_idTouser performance_evaluation[] @relation("performance_evaluation_team_lead_idTouser")
  time_tracking                                                    time_tracking[]
  vacation                                                         vacation[]
}

model vacation {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  employee_id String   @db.Uuid
  start_date  DateTime @db.Date
  end_date    DateTime @db.Date
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user        user     @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
